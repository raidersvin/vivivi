-- 📋 Danh sách người nhận
local recipients = {"Hannah_Hunt3r2022","XxEllie_GoldenxX2021","LIONBLAZEHERO2003_YT","XxG0ldenSparklyxX16","MasonSlim3Vort3x","FireFr0stTiger2007","EchoUltra2006_YT","NinjaStreamPixel","Her0SaberPrism96","BlizzardNightSab3r"}

-- 💬 Danh sách lời chúc
local messages = {
    "Happy Birthday %s!",
    "Hope today brings %s!",
    "Wishing you luck %s!",
    "Congrats on your %s!",
    "Give away %s!",
    "You are amazing %s — here's a gift!"
}

-- ⚙️ Diamonds gửi
local DIAMOND_AMOUNT = 20000000

-- 📦 Load module
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local SaveData = require(Client.Save).Get()

-- 💎 Lấy UID Diamonds
local diamondsUID = nil
for uid, v in pairs(SaveData.Inventory["Currency"]) do
    if v.id == "Diamonds" then
        diamondsUID = uid
        break
    end
end

if not diamondsUID then
    warn("❌ Không tìm thấy UID của Diamonds.")
    return
end

-- 🧠 Pet manager
local Manager = {}
function Manager:GetPets(name_pet, PT_yeucau)
    local Huges = {}
    for uid, v in pairs(SaveData.Inventory.Pet) do
        if string.find(v.id, name_pet) then
            if (PT_yeucau == nil and v.pt == nil) or (PT_yeucau ~= nil and v.pt == PT_yeucau) then
                table.insert(Huges, {
                    UID = uid,
                    SH = v.sh,
                    PT = v.pt,
                    Count = v._am or 1
                })
            end
        end
    end
    return Huges
end

-- 🔍 Lấy 1 Pet để gửi
local listPet = Manager:GetPets("Wisp Wolf", 2)
local pet = listPet[1]

if not pet then
    warn("❌ Không tìm thấy pet phù hợp!")
    return
end

-- Danh sách lỗi riêng biệt
local failedPetList = {}
local failedGemList = {}

-- 🚀 Vòng gửi lần đầu
for index, username in ipairs(recipients) do
    local petMsg = string.format(messages[math.random(1, #messages)], username)
    local petSuccess, petErr = Network.Invoke("Mailbox: Send", username, petMsg, "Pet", pet.UID, 50)

    if petSuccess then
        warn("✅ [" .. index .. "/" .. #recipients .. "] Pet sent to " .. username)
    else
        warn("❌ [" .. index .. "/" .. #recipients .. "] Failed to send PET to " .. username .. ": " .. tostring(petErr))
        table.insert(failedPetList, username)
    end

    task.wait(2)

    local gemMsg = string.format(messages[math.random(1, #messages)], username)
    local gemSuccess, gemErr = Network.Invoke("Mailbox: Send", username, gemMsg, "Currency", diamondsUID, DIAMOND_AMOUNT)

    if gemSuccess then
        warn("✅ [" .. index .. "/" .. #recipients .. "] Gems sent to " .. username)
    else
        warn("❌ [" .. index .. "/" .. #recipients .. "] Failed to send GEMS to " .. username .. ": " .. tostring(gemErr))
        table.insert(failedGemList, username)
    end

    task.wait(3)
end

-- 🔁 Gửi lại Pet nếu lỗi
if #failedPetList > 0 then
    warn("🔁 Đang thử gửi lại PET...")
    for _, username in ipairs(failedPetList) do
        local retryMsg = string.format(messages[math.random(1, #messages)], username)
        local success, err = Network.Invoke("Mailbox: Send", username, retryMsg, "Pet", pet.UID, 50)

        if success then
            warn("✅ [Retry PET] Sent to " .. username)
        else
            warn("❌ [Retry PET] Failed to " .. username .. ": " .. tostring(err))
        end

        task.wait(2)
    end
end

-- 🔁 Gửi lại Gems nếu lỗi
if #failedGemList > 0 then
    warn("🔁 Đang thử gửi lại GEMS...")
    for _, username in ipairs(failedGemList) do
        local retryMsg = string.format(messages[math.random(1, #messages)], username)
        local success, err = Network.Invoke("Mailbox: Send", username, retryMsg, "Currency", diamondsUID, DIAMOND_AMOUNT)

        if success then
            warn("✅ [Retry GEM] Sent to " .. username)
        else
            warn("❌ [Retry GEM] Failed to " .. username .. ": " .. tostring(err))
        end

        task.wait(2)
    end
end

