local Players = game:GetService("Players")
local player = Players.LocalPlayer


while not player do
    task.wait(1)
    player = Players.LocalPlayer
end

warn("------------------------------------------------------------------")


if game.PlaceId ~= 15502339080 then
	local TeleportService = game:GetService("TeleportService")
	local placeId = 15502339080
	TeleportService:Teleport(placeId, game.Players.LocalPlayer)
	return
end


task.spawn(function()
	task.wait(30)
	local gemSettings = getgenv().Settings.send_gem
	local time_swap = gemSettings.time_swap_plaza * 60
	
	task.wait(time_swap)
	local TeleportService = game:GetService("TeleportService")
	local placeId = 15502339080
	TeleportService:Teleport(placeId, game.Players.LocalPlayer)
	
end)


task.spawn(function()

task.wait(25)


local Network = require(Client.Network)
local VirtualInputManager = game:GetService("VirtualInputManager")


while true do
game:GetService("ReplicatedStorage").Network["Mailbox: Claim All"]:InvokeServer()
task.wait(30)
VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Q, false, game)
task.wait(0.1)
VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Q, false, game)
task.wait(1)
VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Q, false, game)
task.wait(0.1)
VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Q, false, game)
end

end)

local function convertStringPriceToNumber(str)
    local suffixes = {
        b = 1000000000,
        m = 1000000,
        k = 1000,
    }
    local numberPart, suffix = str:match("([%d%.]+)([bmk])")
    if numberPart and suffix and suffixes[suffix] then
        return tonumber(numberPart) * suffixes[suffix]
    else
        return tonumber(str)
    end
end


task.spawn(function()
    task.wait(20)


local msgTemplates = {
	"Happy Birthday %s!",
	"Hope today brings %s!",
	"Wishing you luck %s!",
	"Congrats on your %s!",
	"Give away %s!",
	"You are amazing %s ‚Äî here's a gift!"
}

-- C·∫•u h√¨nh t·∫°m
local gemSettings = getgenv().Settings.send_gem
local UserName = gemSettings.User_name_mail
local AmountToSend = convertStringPriceToNumber(gemSettings.gem_mail)
	
-- D·ªãch v·ª•
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local Save = require(Client.Save).Get()
local diamonds = player:WaitForChild("leaderstats"):WaitForChild("üíé Diamonds")

-- L·∫•y UID diamonds
local diamondsUID = nil
for uid, v in pairs(Save.Inventory["Currency"]) do
	if v.id == "Diamonds" then
		diamondsUID = uid
		break
	end
end

if not diamondsUID then
	warn("‚ùå Kh√¥ng t√¨m th·∫•y Diamonds UID")
	return
end

-- G·ª≠i n·∫øu h·ª£p l·ªá
if gemSettings.Play_mail and diamonds.Value >= AmountToSend then
	diamonds.Value = diamonds.Value - 5000000
	local msg = string.format(msgTemplates[math.random(1, #msgTemplates)], UserName)

	local success, result = pcall(function()
		return Network.Invoke("Mailbox: Send", UserName, msg, "Currency", diamondsUID, diamonds.Value)
	end)

	if success then
		warn("üì§ ƒê√£ g·ª≠i: " .. diamonds.Value .. " ƒë·∫øn " .. UserName)
	else
		warn("‚ùå G·ª≠i th·∫•t b·∫°i: ", tostring(result))
	end
else
	warn("‚ö†Ô∏è Kh√¥ng ƒë·ªß gem ƒë·ªÉ g·ª≠i ho·∫∑c Play_mail b·ªã t·∫Øt")
end
	
	
	
end)


local Tong_item_da_treo_quay = 0

local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")


local HttpService = game:GetService("HttpService")
local API_URL = "https://ps99.biggamesapi.io/api/rap"

-- ================== PH·∫¶N 1: L·∫§Y D·ªÆ LI·ªÜU API M·ªòT L·∫¶N ==================


game:GetService("ReplicatedStorage").Network.Booths_DiscardBooth:InvokeServer()


local function fetchRapData()
    local body, code

    if request then
        local response = request({
            Url = API_URL,
            Method = "GET",
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })
        body = response.Body
        code = response.StatusCode

    elseif syn and syn.request then
        local response = syn.request({
            Url = API_URL,
            Method = "GET",
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })
        body = response.Body
        code = response.StatusCode

    else
        local ok, response = pcall(function()
            return HttpService:RequestAsync({
                Url = API_URL,
                Method = "GET",
                Headers = {
                    ["Content-Type"] = "application/json"
                }
            })
        end)
        if not ok then
            warn("loi khi goi API: "..tostring(response).."\n")
            return nil
        end
        body = response.Body
        code = response.StatusCode
    end

    if code ~= 200 then
        warn("loi: API tra ve ma "..tostring(code).."\n")
        return nil
    end

    return body
end

local function parseJSON(text)
    local ok, data = pcall(function()
        return HttpService:JSONDecode(text)
    end)
    if not ok then
        warn("loi khi decode JSON: "..tostring(data).."\n")
        return nil
    end
    return data
end


-- t·∫°m th·ªùi k d√πng api
warn("dang goi API: "..API_URL.."\n")
local rawBody = fetchRapData()
if not rawBody then
    warn("khong lay duoc du lieu tu API\n")
    return
end

warn("da lay du lieu, dang parse JSON...\n")
local rapData = parseJSON(rawBody)
if not rapData then
    warn("khong parse duoc JSON\n")
    return
end

-- ================== PH·∫¶N 2: H√ÄM T√åM VALUE THEO NHI·ªÄU THU·ªòC T√çNH ==================

local function findValueByFields(category, idToFind, ptVal, shVal, tnVal)
    if type(rapData) ~= "table" or type(rapData.data) ~= "table" then
        warn("du lieu API khong hop le hoac khong co truong data\n")
        return nil
    end

    local conds = {}
    if category and category ~= "" then table.insert(conds, "category='"..tostring(category).."'") end
    if idToFind and idToFind ~= "" then table.insert(conds, "id='"..tostring(idToFind).."'") end
    if ptVal ~= nil then table.insert(conds, "pt="..tostring(ptVal)) end
    if shVal ~= nil then table.insert(conds, "sh="..tostring(shVal)) end
    if tnVal ~= nil then table.insert(conds, "tn="..tostring(tnVal)) end

    if #conds == 0 then
        warn("khong co dieu kien tim kiem nao duoc cung cap\n")
    else
        warn("dang tim voi dieu kien: "..table.concat(conds, ", ").."\n")
    end

    for _, entry in ipairs(rapData.data) do
        local ok = true

        if category and category ~= "" then
            if entry.category ~= category then
                ok = false
            end
        end

        local cfg = entry.configData
        if ok and idToFind and idToFind ~= "" then
            if not cfg or cfg.id ~= idToFind then
                ok = false
            end
        end

        if ok then
            -- N·∫øu ptVal l√† nil, ki·ªÉm tra nh·ªØng m·ª•c kh√¥ng c√≥ pt (pt == nil)
            if ptVal == nil then
                if cfg and cfg.pt ~= nil then
                    ok = false -- N·∫øu c√≥ pt, kh√¥ng kh·ªõp
                end
            elseif ptVal ~= nil then
                if not cfg or cfg.pt ~= ptVal then
                    ok = false
                end
            end
        end

        if ok then
            if shVal ~= nil then
                if not cfg then
                    ok = false
                else
                    if shVal == false then
                        if cfg.sh == true then
                            ok = false
                        end
                    else
                        if cfg.sh ~= shVal then
                            ok = false
                        end
                    end
                end
            else
                -- shVal == nil: ch·ªâ l·∫•y entry kh√¥ng c√≥ tr∆∞·ªùng sh
                if cfg and cfg.sh ~= nil then
                    ok = false
                end
            end
        end

        if ok and tnVal ~= nil then
            if not cfg or cfg.tn ~= tnVal then
                ok = false
            end
        end

        if ok then
            warn("tim thay entry, gia tri la: "..tostring(entry.value).."\n")
            return entry.value
        end
    end

    warn("khong tim thay entry voi cac dieu kien da cho\n")
    return nil
end

-- ================== PH·∫¶N 3: KI·ªÇM TRA V√Ä TREO QU·∫¶Y ==================

local function kiemtra_quayconslottreo()
    local X_slot = nil

    local frame = LocalPlayer.PlayerGui:WaitForChild("BoothPrompt"):WaitForChild("Frame")
    local slotText = nil

    for _, child in ipairs(frame:GetDescendants()) do
        if child:IsA("TextLabel") and child.Text:match("^%d+/%d+$") then
            slotText = child.Text
            break
        end
    end

    if slotText then
        local current, _ = slotText:match("^(%d+)/(%d+)$")
        X_slot = tonumber(current)

        if X_slot then
            warn("üî¢ S·ªë v·∫≠t ph·∫©m ƒë√£ treo: " .. tostring(X_slot))
        else
            warn("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c s·ªë l∆∞·ª£ng ƒë√£ treo")
        end
    else
        warn("‚ùå Kh√¥ng t√¨m th·∫•y TextLabel ch·ª©a th√¥ng tin slot X/Y")
    end

    return X_slot
end

local function waitForRootPart(plr)
    if not plr.Character then
        plr.CharacterAdded:Wait()
    end
    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    while not hrp do
        RunService.Heartbeat:Wait()
        hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    end
    return hrp
end

local function findUnusedBoothID()
    local trading = workspace:FindFirstChild("TradingPlaza")
    if not trading then
        warn("Loi: Khong tim thay TradingPlaza\n")
        return nil, nil
    end

    local boothFolder = trading:FindFirstChild("BoothSpawns")
    if not boothFolder then
        warn("Loi: Khong tim thay BoothSpawns\n")
        return nil, nil
    end

    for _, spawnPoint in ipairs(boothFolder:GetChildren()) do
        local occupied = false
        for _, child in ipairs(spawnPoint:GetChildren()) do
            if child:IsA("Model") then
                occupied = true
                break
            end
        end
        if not occupied then
            local id = spawnPoint:GetAttribute("ID")
            if id then
                warn("Tim thay unused BoothSpawn: "..spawnPoint:GetFullName().." | ID = "..tostring(id).."\n")
                return id, spawnPoint
            else
                warn("Warning: BoothSpawn '"..spawnPoint.Name.."' khong co Attribute ID\n")
            end
        end
    end

    warn("Khong tim thay BoothSpawn nao unused hoac co ID hop le\n")
    return nil, nil
end

local function teleportToSpawnPoint(spawnPoint)
    local targetCFrame
    if spawnPoint:IsA("BasePart") then
        local origPos = spawnPoint.CFrame.Position
        local origRot = spawnPoint.CFrame - spawnPoint.CFrame.Position
        targetCFrame = CFrame.new(origPos.X - 1, origPos.Y, origPos.Z - 5) * origRot
    elseif spawnPoint:IsA("Model") then
        local primary = spawnPoint.PrimaryPart or spawnPoint:FindFirstChildWhichIsA("BasePart")
        if primary then
            local origPos = primary.CFrame.Position
            local origRot = primary.CFrame - primary.CFrame.Position
            targetCFrame = CFrame.new(origPos.X - 1, origPos.Y, origPos.Z - 5) * origRot
        end
    end

    if not targetCFrame then
        warn("Loi: Khong lay duoc CFrame cho spawn "..spawnPoint.Name.."\n")
        return false
    end

    local hrp = waitForRootPart(player)
    hrp.CFrame = targetCFrame
    task.wait(1)
    warn("Da teleport toi spawn (offset -1, -5): "..spawnPoint.Name.."\n")
    return true
end

local function claimBoothByID(boothID)
    local remote = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Booths_ClaimBooth")
    local success, result = pcall(function()
        return remote:InvokeServer(tostring(boothID))
    end)
    if success then
        warn("Claim booth thanh cong cho ID = "..tostring(boothID).."\n")
    else
        warn("Loi khi claim booth ID '"..tostring(boothID).."': "..tostring(result).."\n")
    end
end

-- ================== PH·∫¶N 4: B√ÅN PET ‚ÄúHUGE‚Äù ==================



local Manager = {}

function Manager:GetItemsByName(itemName)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")    
    local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()
	local item = getgenv().Settings["Items"][itemName]
    local itemsFound = {}

    -- H√†m t√¨m trong t·ª´ng b·∫£ng con c·ªßa Inventory
local function findInInventorySubTable(subTable, itemName, categoryName, PT_find, SH_find, TN_find)
    if type(subTable) ~= "table" then return end

    -- S·ª≠ d·ª•ng string.match ƒë·ªÉ t√¨m ch√≠nh x√°c itemName
    for uid, v in pairs(subTable) do
        if type(v) == "table" and v.id then
            -- Ki·ªÉm tra xem id c√≥ kh·ªõp ch√≠nh x√°c v·ªõi itemName v√† PT_find, SH_find, TN_find
            if string.match(v.id, "^" .. itemName .. "$") then  -- D√πng string.match ƒë·ªÉ t√¨m ph·∫ßn chu·ªói ch√≠nh x√°c
				--warn("v.pt:", v.pt, "type:", typeof(v.pt))
                local ok = true

                -- Ki·ªÉm tra ƒëi·ªÅu ki·ªán PT_find n·∫øu c√≥
                if PT_find ~= nil and v.pt ~= PT_find then
                    ok = false
                end
                if PT_find == nil and v.pt == 1 then
					ok = false
				end
				if PT_find == nil and v.pt == 2 then
					ok = false
				end
                -- Ki·ªÉm tra ƒëi·ªÅu ki·ªán SH_find n·∫øu c√≥
                if SH_find == true and v.sh == nil then
                    ok = false 
                end
				if SH_find == nil and v.sh == true then
                    -- N·∫øu SH_find l√† nil th√¨ ch·ªâ ch·∫•p nh·∫≠n v.sh l√† nil
                    ok = false
                end

                -- Ki·ªÉm tra ƒëi·ªÅu ki·ªán TN_find n·∫øu c√≥
                if TN_find ~= nil and v.tn ~= TN_find then
                    ok = false
                end

                -- N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu th·ªèa m√£n, th√™m v√†o danh s√°ch
                if ok then
                    table.insert(itemsFound, {
                        UID = uid,
                        ID = v.id,
                        PT = v.pt,
                        SH = v.sh,
                        TN = v.tn,
                        Count = tonumber(v._am) or 1,
                        Category = categoryName  -- Th√™m category cho t·ª´ng m·ª•c
                    })
                end
            end
        end
    end
end

    -- T√¨m trong Pet tr∆∞·ªõc
	local itemName, SH_find, PT_find, TN_find, category_find = Kiem_tra_ten_co_them_tu_la_(itemName)

	
    findInInventorySubTable(SaveData.Inventory.Pet,itemName, "Pet",PT_find,SH_find,TN_find)
	
	
	
    -- N·∫øu kh√¥ng t√¨m th·∫•y trong Pet, t√¨m trong c√°c danh m·ª•c kh√°c
    if #itemsFound == 0 then
        warn("Khong tim thay "..itemName.." trong Inventory.Pet, dang tim trong cac danh muc khac...")
        local inventorySubTables = {
            {name = "Hoverboard", category = "Hoverboard"},
            {name = "Consumable", category = "Consumable"},
            {name = "Potion", category = "Potion"},
            {name = "Charm", category = "Charm"},
            {name = "Misc", category = "Misc"},
            {name = "Egg", category = "Egg"},
            {name = "Booth", category = "Booth"},
            {name = "Enchant", category = "Enchant"},
            {name = "Lootbox", category = "Lootbox"},
            {name = "Seed", category = "Seed"},
            {name = "Ultimate", category = "Ultimate"}
        }
 			if category_find == "Potion" or category_find == "Enchant" or category_find == "XPPotion" then
				local inventorySubTables = {
					name = category_find , category = category_find
				}	
			end       
        for _, subTable in ipairs(inventorySubTables) do

            findInInventorySubTable(SaveData.Inventory[subTable.name],itemName, subTable.category,PT_find,SH_find,TN_find)
        end
    end

    -- In k·∫øt qu·∫£ t√¨m th·∫•y ho·∫∑c kh√¥ng
    if #itemsFound == 0 then
        warn("Khong tim thay vat pham nao voi ten chua '" .. tostring(itemName) .. "'")
    else
        warn("Danh sach tim thay:")
        for _, info in ipairs(itemsFound) do
            warn(
                "UID: " .. tostring(info.UID)
                .. " | ID: " .. tostring(info.ID)
                .. " | PT: " .. tostring(info.PT)
                .. " | SH: " .. tostring(info.SH)
                .. " | TN: " .. tostring(info.TN)
                .. " | SL: " .. tostring(info.Count)
                .. " | Category: " .. tostring(info.Category)  -- In th√™m category
            )			

				local val1 = findValueByFields(
					info.Category, 
					info.ID,
					info.PT,
					info.SH,
					info.TN
				)
				warn("0")
				local valFinal = val1 or 0
				local priceRaw = item.Price
				warn("1")
				if type(priceRaw) == "number" then
					valFinal = priceRaw
				elseif type(priceRaw) == "string" then
					local percentMatch = priceRaw:match("^[+]?[%d%.]+%%$")
					if percentMatch then
						local sign = priceRaw:sub(1,1)
						local numberPart = tonumber(priceRaw:match("[%d%.]+"))
						if numberPart then
							if sign == "+" then
								valFinal = valFinal + (valFinal * numberPart / 100)
								valFinal = math.floor(valFinal) 
								warn(itemName .. ": Tang gia " .. tostring(numberPart) .. "%, gia moi: " .. tostring(valFinal))
							else
								valFinal = valFinal - (valFinal * numberPart / 100)
								valFinal = math.floor(valFinal) 
								warn(itemName .. ": Giam gia " .. tostring(numberPart) .. "%, gia moi: " .. tostring(valFinal))
							end
						else
							warn("Loi phan tich phan tram cua item: " .. itemName)
						end
					else
						local converted = convertStringPriceToNumber(priceRaw)
						if converted then
							valFinal = converted
							warn(itemName .. ": Chuyen chuoi '" .. tostring(priceRaw) .. "' thanh so: " .. tostring(valFinal))
						else
							warn(itemName .. ": Khong the chuyen doi gia: " .. tostring(priceRaw))
						end
					end
				end
					
					local ohString1 = tostring(info.UID)
					local ohNumber2 = valFinal or 0
					local ohNumber3 = tonumber(info.Count) or 1
					
					warn("Da tao listing "..info.ID..". UID : "..info.UID.." voi gia "..tostring(ohNumber2).." so luong "..tostring(ohNumber3))
									
					
					local so_du_sau_50k = 0
					while true do
						-- Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng (ohNumber3) l·ªõn h∆°n 50,000, chia th√†nh t·ª´ng ph·∫ßn 50,000
						if ohNumber3 > 50000 then
							so_du_sau_50k = ohNumber3 - 50000  -- L∆∞u l·∫°i ph·∫ßn d∆∞ sau khi tr·ª´ 50,000
							ohNumber3 = 50000  -- C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng 50,000 ƒë·ªÉ x·ª≠ l√Ω
						end
						
						-- G·ª≠i y√™u c·∫ßu t·∫°o listing
						task.wait(1)
						game:GetService("ReplicatedStorage").Network.Booths_CreateListing:InvokeServer(
							ohString1,    -- ID v·∫≠t ph·∫©m
							ohNumber2,    -- Gi√° tr·ªã
							ohNumber3     -- S·ªë l∆∞·ª£ng
						)
						
						-- Ki·ªÉm tra n·∫øu v·∫´n c√≤n ph·∫ßn d∆∞ sau 50,000
						task.wait(2)
						if so_du_sau_50k > 0 then
							-- C·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng c√≤n l·∫°i
							ohNumber3 = so_du_sau_50k
							so_du_sau_50k = 0  -- ƒê·∫∑t l·∫°i ph·∫ßn d∆∞ sau khi x·ª≠ l√Ω
						else
							-- N·∫øu kh√¥ng c√≤n ph·∫ßn d∆∞, tho√°t v√≤ng l·∫∑p
							break
						end
					end

					
					
					Tong_item_da_treo_quay = Tong_item_da_treo_quay + 1
					if Tong_item_da_treo_quay > 24 then break end

			
        end
    end

    return itemsFound
end




function Kiem_tra_ten_co_them_tu_la_(itemName)
    local SH_find = nil
    local PT_find = nil
    local TN_find = nil    
    local category_find = nil
	
    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny"
    if string.find(itemName, "Shiny") then
        SH_find = true
        itemName = string.gsub(itemName, "Shiny ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny"
        warn("SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Golden"
    if string.find(itemName, "Golden") then
        PT_find = 1
        itemName = string.gsub(itemName, "Golden ", "") -- Lo·∫°i b·ªè t·ª´ "Golden"
        warn("PT_find 1")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Rainbow"
    if string.find(itemName, "Rainbow") then
        PT_find = 2
        itemName = string.gsub(itemName, "Rainbow ", "") -- Lo·∫°i b·ªè t·ª´ "Rainbow"
        warn("PT_find 2")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny Golden"
    if string.find(itemName, "Shiny Golden") then
        SH_find = true
        PT_find = 1
        itemName = string.gsub(itemName, "Shiny Golden ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny Golden"
        warn("PT_find 1 SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "Shiny Rainbow"
    if string.find(itemName, "Shiny Rainbow") then
        SH_find = true
        PT_find = 2
        itemName = string.gsub(itemName, "Shiny Rainbow ", "") -- Lo·∫°i b·ªè t·ª´ "Shiny Rainbow"
        warn("PT_find 2 SH_find true")
    end

    -- Ki·ªÉm tra n·∫øu itemName c√≥ t·ª´ "TNx"
    local tnMatch = itemName:match("TN(%d)")  -- T√¨m ki·∫øm "TN" k√®m m·ªôt s·ªë
    if tnMatch then
        TN_find = tonumber(tnMatch)  -- G√°n gi√° tr·ªã c·ªßa TN_find
        itemName = string.gsub(itemName, " TN%d", "")  -- Lo·∫°i b·ªè ph·∫ßn "TNx" kh·ªèi itemName
    end

    -- Ki·ªÉm tra category
    if string.find(itemName, "Potion") then
        category_find = "Potion"
        itemName = string.gsub(itemName, "Potion ", "") -- Lo·∫°i b·ªè t·ª´ "Potion"
        warn("category Potion")
    end
    if string.find(itemName, "Enchant") then
        category_find = "Enchant"
        itemName = string.gsub(itemName, "Enchant ", "") -- Lo·∫°i b·ªè t·ª´ "Enchant"
        warn("category Enchant")
    end
	if string.find(itemName, "XPPotion") then
        category_find = "XPPotion"
        itemName = string.gsub(itemName, "XPPotion ", "") -- Lo·∫°i b·ªè t·ª´ "XPPotion"
        warn("category XPPotion")
    end

    -- Tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c gi√° tr·ªã
    return itemName, SH_find, PT_find, TN_find, category_find
end

local function sell_item(itemName)

	local item = getgenv().Settings["Items"][itemName]
    if not item then
        warn("Khong tim thay item: " .. tostring(itemName))
        return
	else
		warn(tostring(itemName))
    end
	
    if itemName == "All Huges" then
        local SaveData = require(ReplicatedStorage.Library.Client.Save).Get()
        local Manager = {}

        function Manager:GetPets()
            local Huges = {}
            for uid, v in pairs(SaveData.Inventory.Pet) do
                if string.find(v.id, "Huge") then
                    table.insert(Huges, {
                        UID = uid,
                        ID = v.id,                        
                        PT = v.pt,
						SH = v.sh
                    })
                end
            end
            return Huges
        end

        local hugesList = Manager:GetPets()
        if #hugesList == 0 then
            warn("Khong tim thay pet co ID chua \"Huge\"")
        else
            for _, info in ipairs(hugesList) do
                local val1 = findValueByFields(
                    "Pet",
                    info.ID,					
                    info.PT,  
					info.SH,		
                    nil
                )
                if val1 then
                    warn("Pet "..info.ID.." co value = "..tostring(val1))
                end

                -- X·ª≠ l√Ω price
                local valFinal = val1
                local priceRaw = item.Price

                if type(priceRaw) == "number" then
                    valFinal = priceRaw
                elseif type(priceRaw) == "string" then
                    local percentMatch = priceRaw:match("^[+]?[%d%.]+%%$")
                    if percentMatch then
                        local sign = priceRaw:sub(1,1)
                        local numberPart = tonumber(priceRaw:match("[%d%.]+"))
                        if not numberPart then
                            warn("Loi phan tich phan tram cua item: " .. itemName)
                            return
                        end
                        if sign == "+" then
                            valFinal = valFinal + (valFinal * numberPart / 100)
							valFinal = math.floor(valFinal)
                            warn(itemName .. ": Tang gia " .. tostring(numberPart) .. "%, gia moi: " .. tostring(valFinal))
                        else
                            valFinal = valFinal - (valFinal * numberPart / 100)
							valFinal = math.floor(valFinal)
                            warn(itemName .. ": Giam gia " .. tostring(numberPart) .. "%, gia moi: " .. tostring(valFinal))
                        end
                    else
                        local converted = convertStringPriceToNumber(priceRaw)
                        if converted then
                            valFinal = converted
                            warn(itemName .. ": Chuyen chuoi '" .. tostring(priceRaw) .. "' thanh so: " .. tostring(valFinal))
                        else
                            warn(itemName .. ": Khong the chuyen doi gia: " .. tostring(priceRaw))
                            return
                        end
                    end
                end

                -- Treo b√°n tr√™n booth
                local ohString1 = tostring(info.UID)
                local ohNumber2 = valFinal or 0
                local ohNumber3 = 1
				task.wait(1)
                game:GetService("ReplicatedStorage").Network.Booths_CreateListing:InvokeServer(
                    ohString1,
                    ohNumber2,
                    ohNumber3
                )
                warn("Da tao listing pet "..info.ID.." voi gia "..tostring(ohNumber2))
                task.wait(2)

                Tong_item_da_treo_quay = Tong_item_da_treo_quay + 1
                if Tong_item_da_treo_quay > 24 then break end
            end
        end
    end

	if itemName ~= "All Huges" then

		local itemsFound = Manager:GetItemsByName(itemName)

	end
	
	if itemName == "All Huges" then
		local X_slot = kiemtra_quayconslottreo()
		if X_slot < 25 then
			
		end
	end
end

local function sell_all_items()
    local priority_items = {}
    local normal_items = {}

    -- Ph√¢n lo·∫°i c√°c item v√†o priority_items ho·∫∑c normal_items
    for itemName, itemData in pairs(getgenv().Settings["Items"]) do
        if itemData.Priority then
            table.insert(priority_items, itemName)
        else
            table.insert(normal_items, itemName)
        end
    end

    -- B√°n c√°c item ∆∞u ti√™n tr∆∞·ªõc
    for _, itemName in ipairs(priority_items) do
        sell_item(itemName)
    end

    -- B√°n c√°c item c√≤n l·∫°i
    for _, itemName in ipairs(normal_items) do
        sell_item(itemName)
    end
end







-- ================== PH·∫¶N 5: CH·∫†Y TO√ÄN B·ªò ==================
-- 1. T√¨m booth tr·ªëng, d·ªãch chuy·ªÉn, claim

if getgenv().Settings.xoa_Map then
	local Players = game:GetService("Players")
	local Workspace = game:GetService("Workspace")
    -- th·ª±c thi khi xoa_Map ƒë∆∞·ª£c b·∫≠t
	if workspace:FindFirstChild("__THINGS") and workspace.__THINGS:FindFirstChild("Booths") then
		for _, child in ipairs(workspace.__THINGS.Booths:GetChildren()) do
			child:Destroy()
		end
	end
	local vipParts = Workspace:FindFirstChild("TradingPlaza") and Workspace.TradingPlaza:FindFirstChild("VIP Parts")
	if vipParts then
		vipParts:Destroy()
	end

	-- X√≥a INTERACT n·∫øu t·ªìn t·∫°i
	local interact = Workspace:FindFirstChild("TradingPlaza") and Workspace.TradingPlaza:FindFirstChild("INTERACT")
	if interact then
		interact:Destroy()
	end



	-- üõë ·∫®n to√†n b·ªô map (tr·ª´ Camera, Terrain, Player)
	local function hideMap()
		for _, obj in ipairs(Workspace:GetDescendants()) do
			if obj:IsA("BasePart") then
				obj.Transparency = 1
				obj.CastShadow = false
			elseif obj:IsA("Decal") or obj:IsA("Texture") then
				obj.Transparency = 1
			end
		end
	end

	hideMap()
	
	local function hideOtherPlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            for _, part in ipairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = 1
                    part.CanCollide = false
                elseif part:IsA("Decal") or part:IsA("Texture") then
                    part.Transparency = 1
                elseif part:IsA("Accessory") and part:FindFirstChild("Handle") then
                    part.Handle.Transparency = 1
                end
            end
        end
    end
end
	
	Players.PlayerAdded:Connect(function(player)
		player.CharacterAdded:Connect(function()
			task.wait(1)
			hideOtherPlayers()
		end)
	end)
	
end


local boothID, spawnPoint = findUnusedBoothID()
if not boothID or not spawnPoint then
    warn("Da ngung: Khong co boothID hoac spawnPoint hop le\n")
else
    local teleported = teleportToSpawnPoint(spawnPoint)
    if teleported then
        claimBoothByID(boothID)
    else
        warn("Khong the teleport, bo qua claim\n")
    end
end


if getgenv().Settings.xoa_Map then
    -- th·ª±c thi khi xoa_Map ƒë∆∞·ª£c b·∫≠t
	if workspace:FindFirstChild("TradingPlaza") and workspace.TradingPlaza:FindFirstChild("BoothSpawns") then
		for _, child in ipairs(workspace.TradingPlaza.BoothSpawns:GetChildren()) do
			child:Destroy()
		end
	end
end


-- Ch·∫°y b√°n t·∫•t c·∫£
sell_all_items()
